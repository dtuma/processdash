// <!--#echo var="-*- mode:html -*-" defaultEncoding="data" -->
// Data definitions that are common to both new- and old-style individual
// <!--#echo Full_Name --> projects.
//

#include <<!--#echo Process_ID -->/root_data.txt>

[<!--#echo Process_ID --> Indiv Root Tag] = tag;
[<!--#echo Process_ID --> Team Project Indiv Root] = tag;
[Team Project Indiv Root] = tag;

[Indiv_Initials] = "tttt";
[Indiv_Export_Filename] = [Indiv_Initials] & "-data.pdash";
[EXPORT_FILE] = 
    iff([Team_Data_Directory],
        [Team_Data_Directory] & [file_sep] & [Indiv_Export_Filename],
    iff([Team_Data_Directory_URL],
        [Indiv_Export_Filename],
    ""));

[EXPORT_FILE/Server_URL] = [Team_Data_Directory_URL];
[EXPORT_FILE/Instructions] = iff(
    [Exporting_Namespaced_Phase_Metrics],
        "file:/<!--#echo Process_ID -->/metricsExportFilter.xml",
        "file:/<!--#echo Process_ID -->/metricsExportFilterOld.xml");
[EXPORT_FILE/Disabled] = [Project_Is_Done]
    || lookup([Team_Settings_Node] & "Disable_Indiv_Auto_Export");

[Reverse_Sync_New_Members] = [/Team_Project_Policy/Reverse_Sync_New_Members]
    || [Personal_Project];

[Sync_Full_WBS] = 0;
[Autosync_Disabled] = [Project_Is_Done]
    || lookup([Team_Settings_Node] & "Disable_Indiv_Auto_Sync");

[Indiv_Auto_Labels] = indivAutoLabels();
[Indiv_Auto_Labels_Deferred] = indivAutoLabelsDeferred("Indiv_Auto_Labels");
[Task_Labels] = list([Synchronized_Task_Labels],
    [Synchronized_Task_Milestones], [Indiv_Auto_Labels_Deferred]);

[Effective_Defect_Phase_List] = "<!--#foreach name=Phase list=Phase_List --><!--#if Phase_Is_Defect_Injection --><!--#echo Phase_Name --><!--#endif--><!--#endfor-->";

[Size_Metric_API_Handler] = "mcfSizeMetricApiHandler";

[Add_Task_Handler] = "none";

[Team_Project_Conversion_Needed] =
    iff([Team_Project_Target_PID] != [Team_Process_PID],
        [Team_Project_Target_PID], null);

// find sized objects in this project

[Sized_Object_List] = search(".", "Sized_Object_Units");



/*
 * Lookup team settings data for this project
 */

[/Team_Settings_Node_List] = search("/", "Team_Settings");
[Team_Settings_Node] = 
    index(0, filter([Project_ID] == lookup([_] &/ "Project_ID"),
                    [/Team_Settings_Node_List])) & "/Team_Settings /";

[Defect Type Standard Contents] = 
    lookup([Team_Settings_Node] & "Defect_Type_Standard");

[WBS_Read_Only] = 
    not lookup([Team_Settings_Node] & "Allow_Indiv_WBS_Editing");

[Team_Project_Target_PID] =
    lookup([Team_Settings_Node] & "Team_Process_PID");

[Phase_Display_Filter_List] =
    lookup([Team_Settings_Node] & "Phase_Display_Filter_List");

// Inherit quality metric parameters from the team settings, or choose
// appropriate defaults if the team settings are unavailable.

[Target Design/Code Ratio] = nvlz(
    lookup([Team_Settings_Node] & "Target Design/Code Ratio"), 1.0);

[Target Design Review/Design Ratio] = nvlz(
    lookup([Team_Settings_Node] &"Target Design Review/Design Ratio"), 0.5);

[Target Code Review/Code Ratio] = nvlz(
    lookup([Team_Settings_Node] & "Target Code Review/Code Ratio"), 0.5);

[Target Test Defect Density] = nvlz(
    lookup([Team_Settings_Node] & "Target Test Defect Density"), 5);

[Target Compile Defect Density] = nvlz(
    lookup([Team_Settings_Node] & "Target Compile Defect Density"), 10);

<!--#foreach name=PHASE list=Phase_List #-->

[<!--#echo PHASE_Name -->/Estimated % Phase Yield] = 
    nvl(lookup([Team_Settings_Node] &
        "<!--#echo PHASE_Name -->/Estimated % Phase Yield"),
    <!--#if PHASE_Est_Yield --> <!--#echo PHASE_Est_Yield -->
    <!--#elif PHASE_Is_After_Development --> 0
    <!--#elif PHASE_Is_Appraisal --> 0.70
    <!--#elif PHASE_Is_Failure --> 0.50
    <!--#else--> 0
    <!--#endif-->);
[<!--#echo PHASE_Name -->/Estimated Defects Injected per Hour] = 
    nvl(lookup([Team_Settings_Node] &
        "<!--#echo PHASE_Name -->/Estimated Defects Injected per Hour"),
    <!--#if PHASE_Est_Defect_Inj_Rate --> <!--#echo 
        PHASE_Est_Defect_Inj_Rate -->
    <!--#else--> 0
    <!--#endif-->);
<!--#endfor-->


// Store default quality parameters for PSP phases

[Workflow_Param/PSP/Planning/Estimated % Phase Yield] = 0;
[Workflow_Param/PSP/Design/Estimated % Phase Yield] = 0;
[Workflow_Param/PSP/Design Review/Estimated % Phase Yield] = 0.7;
[Workflow_Param/PSP/Code/Estimated % Phase Yield] = 0;
[Workflow_Param/PSP/Code Review/Estimated % Phase Yield] = 0.7;
[Workflow_Param/PSP/Compile/Estimated % Phase Yield] = 0;
[Workflow_Param/PSP/Test/Estimated % Phase Yield] = 0.5;
[Workflow_Param/PSP/Postmortem/Estimated % Phase Yield] = 0;

[Workflow_Param/PSP/Planning/Estimated Defects Injected per Hour] = 0;
[Workflow_Param/PSP/Design/Estimated Defects Injected per Hour] = 0.75;
[Workflow_Param/PSP/Design Review/Estimated Defects Injected per Hour] = 0;
[Workflow_Param/PSP/Code/Estimated Defects Injected per Hour] = 2;
[Workflow_Param/PSP/Code Review/Estimated Defects Injected per Hour] = 0;
[Workflow_Param/PSP/Compile/Estimated Defects Injected per Hour] = 0.3;
[Workflow_Param/PSP/Test/Estimated Defects Injected per Hour] = 0.067;
[Workflow_Param/PSP/Postmortem/Estimated Defects Injected per Hour] = 0;
