// <!--#echo var="-*- mode:html -*-" defaultEncoding="data" -->
// Data file for an individual <!--#echo Full_Name --> project.
//

#include <<!--#echo Process_ID -->/rollup_dataFile.txt> exclude (
    [Project_Component_List], ".*/% Defect Free",
    [Analyze Rollup Data/leaf], [Analyze Rollup Data/node]
)
#include <<!--#echo Process_ID -->/indiv_root_data.txt>

undefine([Simple Project Tag]);
[Exporting_Namespaced_Phase_Metrics] = true;
[<!--#echo Process_ID --> Indiv2 Root Tag] = tag;
[Enable_Reverse_Sync] = true;
[EV Project Tag] = tag;


/*
 * Define items in support of project node types.
 */
[<!--#echo Process_ID --> /Effective_Phase] = "?????";
[/<!--#echo Process_ID --> /No_Node_Type] == "";
[Node_Type] == [/<!--#echo Process_ID --> /No_Node_Type];
[Node_Type_Spec] = list(
    "(processName:<!--#echo Full_Name -->)",
    [/<!--#echo Process_ID -->/Phase_List]);


/*
 * Allow people to quickly create tasks in a team project
 */

[Add_Task_Handler] = "pdash.addTeamTask";


/*
 * Redefine the rollup filter to include items from this project, and
 * respect the label-based filter if it is in effect.
 */
[Filtered_Task_Labels] = globSearch([Label//Filter], [Task_Labels]);
[Project_WBS_ID_Filter] = nvl([Project_WBS_ID//Filter], [Project_ID]);

[Rollup_Filter] =
    "nvlz(!defined([{Filtered_Task_Labels}]), \
          intersects([{Filtered_Task_Labels}], [EV_Task_IDs])) \
     && nvlz([Project_WBS_ID] == [{Project_WBS_ID_Filter}], \
          startsWith([{Project_WBS_ID_Filter}] & \"/\", [Project_WBS_ID]))";

[Rollup_Namespaced_Phase_Metrics] = true;


/*
 * Modify the rollup calculations for size metrics in the personal dashboard
 */
<!--#foreach name=METRIC list=Size_Metric_Data_Names -->

/*
 * Define legacy size data calculations as aliases to rollups of custom size
 */
[METRIC/Size_Index] = indexOf("METRIC", [Size_Metric_Name_List]);

[Estimated METRIC] = iff([METRIC/Size_Index] < 0, NaN,
    lookup("Size/" & [METRIC/Size_Index] & "/Plan Size"));

[METRIC] = iff([METRIC/Size_Index] < 0, NaN,
    lookup("Size/" & [METRIC/Size_Index] & "/Actual Size"));

/*
 * On the team side, the calculations assume that the team inspects
 * the products that were produced.  But on the personal side, that
 * isn't true - you are inspecting other people's products, not your
 * own. Redefine the "Inspected" metrics to sum up the corresponding
 * "Inspected" items from the Size Inventory form.
 */
<!--#foreach name=Estimated_ values=",Estimated ,," #-->
[Estimated_Inspected METRIC] = 0 + iff([WBS_Managed_Size_Data], 0,
    sumFor ("Estimated_Inspected METRIC" , [Rollup_List]));
<!--#endfor-->

<!--#endfor-->

// For LOC, the metric name differs from the legacy data name. Fix
// the equation that was generated above to reflect this difference.

[New & Changed LOC/Size_Index] = indexOf("LOC", [Size_Metric_Name_List]);


/*
 * Calculate rollups for custom size metrics
 */

[Size_Metric_Eff_Units_List] = map(
    iff([_] == "LOC", "New & Changed LOC", [_]),
    [Size_Metric_Name_List]);
[Filtered_Sized_Object_List] = filterDataNames([Sized_Object_List],
    "/Sized_Objects/", [Rollup_List]);

[Size/Max_Num] == <!--#echo sizeMetrics.maxNumPerProject -->;

<!--#foreach index=II count=sizeMetrics.maxNumPerProject -->
[Size/II/Metric_ID]        = index(II, [Size_Metric_ID_List]);
[Size/II/Metric_Name]      = index(II, [Size_Metric_Name_List]);
[Size/II/Metric_Eff_Units] = index(II, [Size_Metric_Eff_Units_List]);
[Size/II/Unmanaged_List] = filter(
    lookup([_] & "/Sized_Object_Units") == [Size/II/Metric_Eff_Units],
    [Filtered_Sized_Object_List]);
[Size/II/Managed_Prefix] = "Sized_Objects/" & [Size/II/Metric_ID];
[Size/II/Managed_Owned_List] =
    iff(![WBS_Managed_Size_Data], list(),
    iff([Personal_Project], [Rollup_List],
    filter(lookup([_] &/ [Size/II/Managed_Prefix] & "/Is Owner"),
           [Rollup_List])));
[Size/II/Plan Size] = 0 + sumFor ("Estimated Size", [Size/II/Unmanaged_List])
    + sumFor ([Size/II/Managed_Prefix] & "/Plan Size", [Size/II/Managed_Owned_List]);
[Size/II/Actual Size] = 0 + sumFor ("Size", [Size/II/Unmanaged_List])
    + sumFor ([Size/II/Managed_Prefix] & "/Actual Size", [Size/II/Managed_Owned_List]);

<!--#endfor-->
